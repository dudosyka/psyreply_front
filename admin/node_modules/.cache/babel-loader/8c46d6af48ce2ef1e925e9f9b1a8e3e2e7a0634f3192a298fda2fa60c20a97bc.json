{"ast":null,"code":"import User from \"@/api/admin/User\";\nimport Group from \"@/api/admin/Group\";\nimport mainConf, { ProjectState } from \"../../../../main.conf\";\nexport default {\n  name: \"CreateGroup\",\n  data() {\n    return {\n      company: {},\n      group: {\n        name: \"\",\n        users: []\n      },\n      users: []\n    };\n  },\n  async created() {\n    if (mainConf.projectState === ProjectState.dev) console.log(this.$store.state.company.name);\n    this.company = this.$store.state.company;\n    const user = new User();\n    this.users = (await user.getAll({\n      except_company_id: this.company.id\n    })).map(el => {\n      el.active = false;\n      return el;\n    });\n    // console.log(this.users[0]);\n  },\n\n  methods: {\n    selectUser(n) {\n      n.active = !n.active;\n    },\n    create() {\n      const group = new Group();\n      this.group.users = this.users.filter(el => el.active).map(el => parseInt(el.id));\n      group.create(this.company.id, this.group).then(res => {\n        this.$emit('close');\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AA+BA,OAAOA,IAAG,MAAO,kBAAkB;AACnC,OAAOC,KAAI,MAAO,mBAAmB;AACrC,OAAOC,QAAQ,IAAGC,YAAY,QAAO,uBAAuB;AAE5D,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAI,GAAG;IACL,OAAO;MACLC,OAAO,EAAE,CAAC,CAAC;MACXC,KAAK,EAAE;QACLH,IAAI,EAAE,EAAE;QACRI,KAAK,EAAE;MACT,CAAC;MACDA,KAAK,EAAE;IACT;EACF,CAAC;EACD,MAAMC,OAAO,GAAG;IACd,IAAIP,QAAQ,CAACQ,YAAW,KAAMP,YAAY,CAACQ,GAAG,EAC5CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACT,OAAO,CAACF,IAAI,CAAC;IAC7C,IAAI,CAACE,OAAM,GAAI,IAAI,CAACQ,MAAM,CAACC,KAAK,CAACT,OAAO;IAExC,MAAMU,IAAG,GAAI,IAAIhB,IAAI,EAAE;IACvB,IAAI,CAACQ,KAAI,GAAI,CAAC,MAAMQ,IAAI,CAACC,MAAM,CAAC;MAC9BC,iBAAiB,EAAE,IAAI,CAACZ,OAAO,CAACa;IAClC,CAAC,CAAC,EAAEC,GAAG,CAACC,EAAC,IAAK;MACZA,EAAE,CAACC,MAAK,GAAI,KAAK;MACjB,OAAOD,EAAE;IACX,CAAC,CAAC;IACF;EACF,CAAC;;EACDE,OAAO,EAAE;IACPC,UAAU,CAACC,CAAC,EAAE;MACZA,CAAC,CAACH,MAAK,GAAI,CAACG,CAAC,CAACH,MAAM;IACtB,CAAC;IACDI,MAAM,GAAG;MACP,MAAMnB,KAAI,GAAI,IAAIN,KAAK,EAAE;MACzB,IAAI,CAACM,KAAK,CAACC,KAAI,GAAI,IAAI,CAACA,KAAK,CAACmB,MAAM,CAACN,EAAC,IAAKA,EAAE,CAACC,MAAM,CAAC,CAACF,GAAG,CAACC,EAAC,IAAKO,QAAQ,CAACP,EAAE,CAACF,EAAE,CAAC,CAAC;MAChFZ,KAAK,CAACmB,MAAM,CAAC,IAAI,CAACpB,OAAO,CAACa,EAAE,EAAE,IAAI,CAACZ,KAAK,CAAC,CAACsB,IAAI,CAACC,GAAE,IAAK;QACpD,IAAI,CAACC,KAAK,CAAC,OAAO,CAAC;MACrB,CAAC,CAAC;IACJ;EACF;AACF","names":["User","Group","mainConf","ProjectState","name","data","company","group","users","created","projectState","dev","console","log","$store","state","user","getAll","except_company_id","id","map","el","active","methods","selectUser","n","create","filter","parseInt","then","res","$emit"],"sourceRoot":"","sources":["/home/yan/Документы/psyreply2.0_front/admin/src/components/Group/CreateGroup.vue"],"sourcesContent":["<template>\n  <header class=\"header\">\n    <y-left-arrow-button @click=\"$emit('close')\" />\n    <h1>Создание новой группы в {{company.name}}</h1>\n  </header>\n  <y-modal\n    class=\"block\"\n  >\n    <header>\n      <h2 class=\"heading\">Основная информация</h2>\n    </header>\n    <y-input placeholder=\"Название\" v-model.trim=\"group.name\" />\n  </y-modal>\n  <y-modal\n    class=\"block\"\n  >\n    <header>\n      <h2 class=\"heading\">Добавление пользователей в группу</h2>\n    </header>\n    <y-list\n        :items=\"users\"\n        key-of-name=\"login\"\n        show-id=\"jetBotId\"\n        :selectable=\"true\"\n        @select=\"selectUser\"\n    />\n  </y-modal>\n  <y-cool-button @click=\"create\">Сохранить</y-cool-button>\n</template>\n\n<script>\nimport User from \"@/api/admin/User\";\nimport Group from \"@/api/admin/Group\";\nimport mainConf, {ProjectState} from \"../../../../main.conf\";\n\nexport default {\n  name: \"CreateGroup\",\n  data() {\n    return {\n      company: {},\n      group: {\n        name: \"\",\n        users: []\n      },\n      users: []\n    }\n  },\n  async created() {\n    if (mainConf.projectState === ProjectState.dev)\n      console.log(this.$store.state.company.name);\n    this.company = this.$store.state.company;\n\n    const user = new User();\n    this.users = (await user.getAll({\n      except_company_id: this.company.id\n    })).map(el => {\n      el.active = false;\n      return el;\n    });\n    // console.log(this.users[0]);\n  },\n  methods: {\n    selectUser(n) {\n      n.active = !n.active;\n    },\n    create() {\n      const group = new Group();\n      this.group.users = this.users.filter(el => el.active).map(el => parseInt(el.id));\n      group.create(this.company.id, this.group).then(res => {\n        this.$emit('close');\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .header {\n    display: grid;\n    grid-template-columns: auto max-content;\n    justify-content: left;\n    grid-gap: 1rem;\n  }\n  .block {\n    display: grid;\n    grid-gap: .5rem;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}