{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CreateTest from '@/components/Test/CreateTest';\nimport Test from '@/api/admin/Test';\nimport Block from '@/api/admin/Block';\nimport mainConf, { ProjectState } from \"../../../../main.conf\";\nexport default {\n  name: \"CreateBlock\",\n  components: {\n    CreateTest\n  },\n  emits: ['close'],\n  data() {\n    return {\n      window: 'main',\n      block: {\n        name: null,\n        hours: null,\n        minutes: null,\n        seconds: null\n      },\n      tests: []\n    };\n  },\n  created() {\n    this.updateTestList();\n  },\n  methods: {\n    updateTestList() {\n      const test = new Test();\n      test.getAll({\n        filters: {}\n      }).then(res => {\n        if (res.ok) {\n          res.json().then(r => this.tests = r.body);\n        } else {\n          this.$store.commit('openErrorPopup', res.msg());\n        }\n      });\n    },\n    createTest() {\n      this.window = 'createTest';\n    },\n    createTestClosed() {\n      this.window = 'main';\n      this.updateTestList();\n    },\n    selectTest(n) {\n      let test = this.tests.filter(el => el.id === n.id);\n      test = test[0];\n      if ('active' in test) {\n        test.active = !test.active;\n      } else {\n        test['active'] = true;\n      }\n    },\n    saveBlock() {\n      const body = {};\n      body.name = this.block.name;\n      let time = 0;\n      time += this.block.hours * 60 * 60 * 1000;\n      time += this.block.minutes * 60 * 1000;\n      time += this.block.seconds * 1000;\n      body.time = time;\n      const tests = this.tests.filter(el => el.active);\n      body.tests = [];\n      tests.map(el => body.tests.push(el.id));\n      if (mainConf.projectState === ProjectState.dev) console.log(body.test);\n      const block = new Block();\n      block.create('', body).then(res => {\n        if (mainConf.projectState === ProjectState.dev) console.log(res);\n        if (res.ok) {\n          this.$store.commit('openPopup', \"Блок успешно создан!\");\n          this.$emit('close');\n        } else {\n          this.$store.commit('openErrorPopup', res.msg());\n          if (mainConf.projectState === ProjectState.dev) console.log(res);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["CreateTest","Test","Block","mainConf","ProjectState","name","components","emits","data","window","block","hours","minutes","seconds","tests","created","updateTestList","methods","test","getAll","filters","then","res","ok","json","r","body","$store","commit","msg","createTest","createTestClosed","selectTest","n","filter","el","id","active","saveBlock","time","map","push","projectState","dev","console","log","create","$emit"],"sourceRoot":"","sources":["/home/yan/Документы/psyreply2.0_front/admin/src/components/Block/CreateBlock.vue"],"sourcesContent":["<template>\n  <y-modal class=\"modal\" v-if=\"window === 'main'\">\n    <header class=\"header\">\n      <y-left-arrow-button @click=\"$emit('close')\" />\n      <h1 class=\"heading\">Новый блок</h1>\n\n      <y-modal class=\"time-picker\">Время на прохождение -\n        <y-input max=\"99\" min=\"0\" type=\"number\" v-model=\"block.hours\" placeholder=\"чч\" class=\"time-picker__input\"/>:\n        <y-input max=\"59\" min=\"0\" type=\"number\" v-model=\"block.minutes\" placeholder=\"мм\" class=\"time-picker__input\"/>:\n        <y-input max=\"59\" min=\"0\" type=\"number\" v-model=\"block.seconds\" placeholder=\"сс\" class=\"time-picker__input\"/>\n      </y-modal>\n\n      <y-button @click=\"createTest\" :plus=\"true\">Добавить тест</y-button>\n\n    </header>\n    <y-input\n      v-model.trim=\"block.name\"\n      placeholder=\"Название блока\"\n    />\n    <y-list\n      :items=\"tests\"\n      key-of-name=\"title\"\n      :selectable=\"true\"\n      @select=\"selectTest\"\n      :size=\"5\"\n      :pagination=\"true\"\n    />\n    <y-cool-button @click=\"saveBlock\">Сохранить блок</y-cool-button>\n  </y-modal>\n\n  <create-test\n    v-if=\"window === 'createTest'\"\n    @close=\"createTestClosed\"\n  />\n</template>\n\n<script>\nimport CreateTest from '@/components/Test/CreateTest';\nimport Test from '@/api/admin/Test'\nimport Block from '@/api/admin/Block';\nimport mainConf, {ProjectState} from \"../../../../main.conf\";\n\nexport default {\n  name: \"CreateBlock\",\n  components: {\n    CreateTest\n  },\n  emits: ['close'],\n  data() {\n    return {\n      window: 'main',\n      block: {\n        name: null,\n        hours: null,\n        minutes: null,\n        seconds: null\n      },\n      tests: []\n    }\n  },\n  created() {\n    this.updateTestList()\n  },\n  methods: {\n    updateTestList() {\n      const test = new Test()\n      test.getAll({ filters: {  } })\n          .then(res => {\n            if (res.ok) {\n              res.json().then(r => this.tests = r.body)\n            } else {\n              this.$store.commit('openErrorPopup', res.msg())\n            }\n          })\n    },\n    createTest() {\n      this.window = 'createTest';\n    },\n    createTestClosed() {\n      this.window = 'main'\n      this.updateTestList()\n    },\n    selectTest(n) {\n      let test = this.tests.filter(el => el.id === n.id)\n      test = test[0]\n      if ('active' in test) {\n        test.active = !test.active\n      } else {\n        test['active'] = true\n      }\n    },\n    saveBlock() {\n      const body = {}\n\n      body.name = this.block.name\n\n      let time = 0\n\n      time += this.block.hours * 60 * 60 * 1000\n      time += this.block.minutes * 60 * 1000\n      time += this.block.seconds * 1000\n\n      body.time = time\n\n      const tests = this.tests.filter(el => el.active)\n\n      body.tests = []\n\n      tests.map(el => body.tests.push(el.id))\n\n      if (mainConf.projectState === ProjectState.dev)\n        console.log(body.test)\n\n      const block = new Block()\n      block.create('', body)\n        .then(res => {\n          if (mainConf.projectState === ProjectState.dev)\n            console.log(res)\n          if (res.ok) {\n            this.$store.commit('openPopup', \"Блок успешно создан!\")\n            this.$emit('close')\n          } else {\n            this.$store.commit('openErrorPopup', res.msg())\n            if (mainConf.projectState === ProjectState.dev)\n              console.log(res)\n          }\n        })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.modal {\n  display: grid;\n  grid-gap: 1rem;\n}\n.header {\n  display: grid;\n  grid-template-columns: auto 1fr auto min-content;\n  grid-gap: 2rem;\n  justify-content: start;\n  align-items: center;\n}\n\n.time-picker {\n  font-size: 1.2rem;\n  padding: .2rem;\n  display: grid;\n  grid-template-columns: auto repeat(3, 3.3rem min-content);\n  align-items: center;\n  grid-gap: .1rem;\n}\n.time-picker__input {\n  padding: .1rem;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}