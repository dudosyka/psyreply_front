{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AddAnswers from \"@/components/Test/AddAnswers\";\nimport Question from '@/components/Test/Question';\nimport Metric from '@/api/admin/Metric';\nimport QuestionType from '@/api/admin/QuestionType';\nimport Test from '@/api/admin/Test';\nimport CreateMetric from \"@/components/Test/Metrics/CreateMetric\";\nimport YInput from \"@/components/UI/YInput\";\nimport mainConf, { ProjectState } from \"../../../../main.conf\";\nfunction update(data) {\n  if (data.testId !== -1) {\n    const test = new Test();\n    test.get(data.testId).then(res => {\n      if (res.ok) {\n        res.json().then(res => {\n          const r = res.body;\n          data.test.type = r.type.id;\n          data.test.title = r.title;\n          data.test.formula = r.formula.match('\\\\[\\\\+(.*)\\\\]')[1];\n          data.formula_div = r.formula.match('.*\\\\/(.*)')[1];\n          data.test.metric = r.metric.id;\n          r.questions = r.questions.map(el => {\n            return {\n              ...el,\n              answers: JSON.parse(el.value)\n            };\n          });\n          data.$store.commit('fillQuestions', r.questions);\n        });\n      } else {\n        this.$store.commit('openErrorPopup', res.msg());\n        if (mainConf.projectState === ProjectState.dev) console.log(res);\n      }\n    });\n  }\n  const metric = new Metric();\n  metric.getOne().then(res => {\n    if (res.ok) {\n      res.json().then(r => data.metrics = r.body);\n    } else {\n      this.$store.commit('openErrorPopup', res.msg());\n    }\n  });\n  const types = new QuestionType();\n  types.getOne().then(res => {\n    if (res.ok) {\n      res.json().then(r => data.questionTypes = r.body);\n    } else {\n      this.$store.commit('openErrorPopup', res.msg());\n    }\n  });\n}\nexport default {\n  name: \"CreateTest\",\n  components: {\n    YInput,\n    CreateMetric,\n    AddAnswers,\n    Question\n  },\n  emits: ['close'],\n  props: {\n    testId: {\n      type: Number,\n      default: -1\n    },\n    title: {\n      type: String,\n      default: 'Новый тест'\n    }\n  },\n  data() {\n    return {\n      window: 'main',\n      questionTypes: [],\n      metrics: [],\n      formula_div: \"\",\n      test: {\n        type: null,\n        title: null,\n        formula: null,\n        metric: null\n      }\n    };\n  },\n  created() {\n    this.$store.commit('clearNewTest');\n    update(this);\n  },\n  methods: {\n    updateMetricList() {\n      const metric = new Metric();\n      metric.getOne().then(res => {\n        if (res.ok) {\n          res.json().then(r => this.metrics = r.body);\n        } else {\n          this.$store.commit('openErrorPopup', res.msg());\n        }\n      });\n    },\n    createMetric() {\n      this.window = 'createMetric';\n      this.$router.push('/test/createMetric');\n    },\n    createMetricClosed() {\n      this.window = 'main';\n      this.updateMetricList();\n      this.$router.push('/test/create');\n    },\n    autoFormula() {\n      const formulaArr = [];\n      let i = 1;\n      this.$store.getters.questions.map(() => {\n        formulaArr.push(\"$\" + i);\n        i++;\n      });\n      this.test.formula = formulaArr.join(\"+\");\n    },\n    close() {\n      this.$emit('close');\n      this.$store.commit('clearNewTest');\n    },\n    update() {\n      update(this);\n    },\n    selectLabel(type, id) {\n      if (this.questions.length > 0 && type === 'type') {\n        this.$store.commit('openErrorPopup', 'Вы не можете изменят тип теста, если вопросы уже созданы с другим типом. Пожалуйста, начните составлять тест заново');\n        return;\n      }\n      this.test[type] = id;\n    },\n    addQuestion() {\n      let question = {};\n      if (this.test.type !== 2) {\n        question = {\n          title: null,\n          picture: null,\n          answers: [],\n          coins: null\n        };\n      } else {\n        question = {\n          title: null,\n          picture: null,\n          answers: [{\n            id: 1,\n            title: 'Да',\n            value: null\n          }, {\n            id: 2,\n            title: 'Нет',\n            value: null\n          }],\n          coins: null\n        };\n      }\n      this.$store.commit('addQuestion', {\n        question,\n        needCopy: this.test.type !== 2\n      });\n    },\n    saveTest() {\n      if (this.test.title.length < 4) {\n        this.$store.commit('openErrorPopup', 'Слишком короткое название');\n      }\n      this.calculateFormulaDivision();\n      const test = new Test();\n      const body = JSON.parse(JSON.stringify(this.test));\n      const formula = body.formula;\n      this.formula_div = this.formula_div == \"\" ? 1 : parseInt(this.formula_div);\n      if (test.shlypaMarkupValidation(`[+${formula}]/${this.formula_div}`)) {\n        body.formula = `[+${formula}]/${this.formula_div}`;\n      } else {\n        return this.$store.commit('openErrorPopup', 'Ошибка в формуле');\n      }\n      body.questions = this.questions;\n      let flag = false;\n      let i = 1;\n      body.questions = body.questions.map((el, id) => {\n        if (el.coins > 99099099) {\n          this.$store.commit('openErrorPopup', `Слишком большое число монет в ${id} вопросе. Максимальное количество 99099099`);\n          flag = true;\n        }\n        el.answers = el.answers.map(el => {\n          // el.id++;\n          el.value = parseInt(el.value);\n          return el;\n        });\n        el.relative_id = i;\n        i++;\n        el.coins = parseInt(el.coins);\n        return {\n          ...el,\n          id: el.id ?? null\n        };\n      });\n      if (flag) {\n        return;\n      }\n      if (this.testId !== -1) {\n        test.update(this.testId, {\n          id: this.testId,\n          ...body\n        }).then(res => {\n          if (res.ok) {\n            this.$store.commit('openPopup', 'Тест успешно изменён');\n            this.$store.commit('clearNewTest');\n            this.update();\n          } else {\n            this.$store.commit('openErrorPopup', res.msg());\n          }\n        });\n      } else {\n        body.questions = body.questions.map(quest => {\n          const first = quest.answers[0].id;\n          quest.answers = quest.answers.map(answ => {\n            if (first == 0) answ.id++;\n            return answ;\n          });\n          return quest;\n        });\n        test.create('', body).then(res => {\n          if (res.ok) {\n            this.$store.commit('openPopup', 'Тест успешно сохранён');\n            this.$store.commit('clearNewTest');\n            this.$emit('close');\n          } else {\n            this.$store.commit('openErrorPopup', res.msg());\n          }\n        });\n      }\n    },\n    removeQuestion(id) {\n      this.$store.commit('removeQuestion', id);\n    },\n    calculateFormulaDivision() {\n      let max = 0;\n      this.$store.getters.questions.map(quest => {\n        let maxInAnswers = 0;\n        quest.answers.map(answ => {\n          // If we get question where we can pick all answers we should sum all of them points\n          if (this.test.type === 3) {\n            maxInAnswers += parseInt(answ.value);\n          } else {\n            maxInAnswers = answ.value > maxInAnswers ? parseInt(answ.value) : maxInAnswers;\n          }\n        });\n        max += maxInAnswers;\n      });\n      this.formula_div = max;\n    }\n  },\n  computed: {\n    questions() {\n      this.calculateFormulaDivision();\n      return this.$store.getters.questions;\n    },\n    coins() {\n      let coins = 0;\n      this.questions.map(el => coins += Number(el.coins));\n      return coins;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["AddAnswers","Question","Metric","QuestionType","Test","CreateMetric","YInput","mainConf","ProjectState","update","data","testId","test","get","then","res","ok","json","r","body","type","id","title","formula","match","formula_div","metric","questions","map","el","answers","JSON","parse","value","$store","commit","msg","projectState","dev","console","log","getOne","metrics","types","questionTypes","name","components","emits","props","Number","default","String","window","created","methods","updateMetricList","createMetric","$router","push","createMetricClosed","autoFormula","formulaArr","i","getters","join","close","$emit","selectLabel","length","addQuestion","question","picture","coins","needCopy","saveTest","calculateFormulaDivision","stringify","parseInt","shlypaMarkupValidation","flag","relative_id","quest","first","answ","create","removeQuestion","max","maxInAnswers","computed"],"sourceRoot":"","sources":["/home/yan/Документы/psyreply2.0_front/admin/src/components/Test/CreateTest.vue"],"sourcesContent":["<template>\n  <y-modal class=\"modal\">\n    <template v-if=\"window === 'main'\">\n      <header class=\"header\">\n        <y-left-arrow-button v-if=\"testId === -1\" @click=\"close\" />\n        <h1 class=\"heading\">{{ title }}</h1>\n      </header>\n\n      <article class=\"main\"> <!-- We can use main единожды !-->\n        <div class=\"main__input_coins\">\n          <y-input v-model=\"test.title\" placeholder=\"Название теста...\"/>\n          <div class=\"coins\">\n            <img src=\"@/assets/img/coins.svg\" alt=\"\">\n            <div class=\"count\">{{ coins }}</div>\n          </div>\n        </div>\n\n        <div class=\"types\">\n          <div class=\"type__test\">\n            <div class=\"type__test__title\">Тип теста</div>\n            <y-mini-button\n                class=\"type__test__type\"\n                v-for=\"type of questionTypes\"\n                :key=\"`${type.id}${type.name}`\"\n                :active=\"type.id === test.type\"\n                @click=\"selectLabel('type', type.id)\"\n            >\n              {{ type.name }}\n            </y-mini-button>\n          </div>\n          <div class=\"type__test\">\n            <div class=\"type__test__title\">Тип метрики</div>\n            <y-mini-button\n                class=\"type__test__type\"\n                v-for=\"metric of metrics\"\n                :key=\"`${metric.id}${metric.name}`\"\n                :active=\"metric.id === test.metric\"\n                @click=\"selectLabel('metric', metric.id)\"\n            >\n              {{ metric.name }}\n            </y-mini-button>\n\n            <y-mini-button\n                class=\"type__test__type\"\n                @click=\"createMetric\"\n            >\n              Добавить\n            </y-mini-button>\n          </div>\n        </div>\n      </article>\n\n      <section v-if=\"test.metric > 0 && test.type > 0\" class=\"questions\">\n        <hr/>\n        <div class=\"header__plus\">\n          <h2 class=\"heading\">Вопросы</h2>\n          <y-cool-button v-if=\"questions.length <= 0\" class=\"ml-1\" @click=\"addQuestion\">Добавить вопрос</y-cool-button>\n        </div>\n\n        <template v-if=\"questions.length > 0\">\n\n          <template v-for=\"(question, id) in questions\" :key=\"`${id}${question.id}`\">\n            <question\n                :question-id=\"id\"\n                :type=\"test.type\"\n                @remove=\"removeQuestion(id)\"\n            />\n          </template>\n\n          <y-cool-button @click=\"addQuestion\">Добавить вопрос</y-cool-button>\n\n          <div class=\"type__test\">\n            <div class=\"type__test__title\">Формула</div>\n            <y-input class=\"w-50\" v-model=\"test.formula\" /> <br>\n            <div class=\"formula_controls\">\n              <y-button class=\"formula_control\" @click=\"autoFormula\">Сумма по всем вопросам</y-button>\n<!--              <y-input class=\"formula_control\" placeholder=\"Добавить делитель\" v-model.trim=\"formula_div\"></y-input>-->\n            </div>\n          </div>\n\n          <y-cool-button @click=\"saveTest\">Сохранить тест</y-cool-button>\n        </template>\n\n        <div v-else class=\"questions__list\">\n          <div class=\"state_1\">Здесь будет отображаться список вопросов.\n            <span>Начните с создание нового вопроса</span>\n          </div>\n        </div>\n\n        <!--        <hr>\n                <y-test-type1 />\n                <hr>\n                <y-test-type2 />\n                <hr>-->\n\n      </section>\n    </template>\n\n    <create-metric\n        v-if=\"window === 'createMetric'\"\n        @close=\"createMetricClosed\"\n    ></create-metric>\n  </y-modal>\n</template>\n\n<script>\nimport AddAnswers from \"@/components/Test/AddAnswers\";\nimport Question from '@/components/Test/Question';\n\nimport Metric from '@/api/admin/Metric';\nimport QuestionType from '@/api/admin/QuestionType';\nimport Test from '@/api/admin/Test'\nimport CreateMetric from \"@/components/Test/Metrics/CreateMetric\";\nimport YInput from \"@/components/UI/YInput\";\nimport mainConf, {ProjectState} from \"../../../../main.conf\";\n\nfunction update(data) {\n  if (data.testId !== -1) {\n    const test = new Test()\n    test.get(data.testId)\n      .then(res => {\n        if (res.ok) {\n          res.json().then(res => {\n            const r = res.body;\n            data.test.type = r.type.id\n            data.test.title = r.title\n            data.test.formula = r.formula.match('\\\\[\\\\+(.*)\\\\]')[1]\n            data.formula_div = r.formula.match('.*\\\\/(.*)')[1]\n            data.test.metric = r.metric.id\n            r.questions = r.questions.map(el => {\n              return {\n                ...el,\n                answers: JSON.parse(el.value)\n              }\n            })\n            data.$store.commit('fillQuestions', r.questions)\n          })\n        } else {\n          this.$store.commit('openErrorPopup', res.msg())\n          if (mainConf.projectState === ProjectState.dev)\n            console.log(res)\n        }\n      })\n  }\n\n  const metric = new Metric\n  metric.getOne()\n    .then(res => {\n      if (res.ok) {\n        res.json().then(r => data.metrics = r.body)\n      } else {\n        this.$store.commit('openErrorPopup', res.msg())\n      }\n    })\n  const types = new QuestionType\n  types.getOne()\n    .then(res => {\n      if (res.ok) {\n        res.json().then(r => data.questionTypes = r.body)\n      } else {\n        this.$store.commit('openErrorPopup', res.msg())\n      }\n    })\n}\n\nexport default {\n  name: \"CreateTest\",\n  components: {\n    YInput,\n    CreateMetric,\n    AddAnswers, Question\n  },\n  emits: ['close'],\n  props: {\n    testId: {\n      type: Number,\n      default: -1\n    },\n    title: {\n      type: String,\n      default: 'Новый тест'\n    }\n  },\n  data(){\n    return {\n      window: 'main',\n      questionTypes: [],\n      metrics: [],\n      formula_div: \"\",\n      test: {\n        type: null,\n        title: null,\n        formula: null,\n        metric: null,\n      },\n    }\n  },\n  created() {\n    this.$store.commit('clearNewTest');\n    update(this)\n  },\n  methods: {\n    updateMetricList() {\n      const metric = new Metric()\n      metric.getOne()\n          .then(res => {\n            if (res.ok) {\n              res.json().then(r => this.metrics = r.body)\n            } else {\n              this.$store.commit('openErrorPopup', res.msg())\n            }\n          })\n    },\n    createMetric() {\n      this.window = 'createMetric';\n      this.$router.push('/test/createMetric');\n    },\n    createMetricClosed() {\n      this.window = 'main'\n      this.updateMetricList();\n      this.$router.push('/test/create')\n    },\n    autoFormula() {\n      const formulaArr = []\n      let i = 1;\n      this.$store.getters.questions.map(() => {\n        formulaArr.push(\"$\" + i);\n        i++;\n      });\n      this.test.formula = formulaArr.join(\"+\");\n    },\n    close() {\n      this.$emit('close')\n      this.$store.commit('clearNewTest')\n    },\n    update() {\n      update(this)\n    },\n    selectLabel(type, id) {\n      if (this.questions.length > 0 && type === 'type') {\n        this.$store.commit('openErrorPopup', 'Вы не можете изменят тип теста, если вопросы уже созданы с другим типом. Пожалуйста, начните составлять тест заново')\n        return\n      }\n      this.test[type] = id\n    },\n    addQuestion() {\n      let question = {}\n\n      if (this.test.type !== 2) {\n        question = {\n          title: null,\n          picture: null,\n          answers: [],\n          coins: null\n        }\n      } else {\n        question = {\n          title: null,\n          picture: null,\n          answers: [\n            {\n              id: 1,\n              title: 'Да',\n              value: null\n            },\n            {\n              id: 2,\n              title: 'Нет',\n              value: null\n            }\n          ],\n          coins: null\n        }\n      }\n\n      this.$store.commit('addQuestion', { question, needCopy: this.test.type !== 2})\n    },\n    saveTest() {\n      if (this.test.title.length < 4) {\n        this.$store.commit('openErrorPopup', 'Слишком короткое название')\n      }\n\n      this.calculateFormulaDivision();\n\n      const test = new Test()\n\n      const body = JSON.parse(JSON.stringify(this.test))\n\n      const formula = body.formula\n\n      this.formula_div = (this.formula_div == \"\") ? 1 : parseInt(this.formula_div);\n\n      if (test.shlypaMarkupValidation(`[+${formula}]/${this.formula_div}`)) {\n        body.formula = `[+${formula}]/${this.formula_div}`\n      } else {\n        return this.$store.commit('openErrorPopup', 'Ошибка в формуле')\n      }\n\n      body.questions = this.questions\n\n      let flag = false\n      let i = 1;\n      body.questions = body.questions.map((el, id) => {\n        if (el.coins > 99099099) {\n          this.$store.commit('openErrorPopup', `Слишком большое число монет в ${id} вопросе. Максимальное количество 99099099`)\n          flag = true\n        }\n        el.answers = el.answers.map(el => {\n          // el.id++;\n          el.value = parseInt(el.value);\n          return el;\n        });\n        el.relative_id = i;\n        i++;\n        el.coins = parseInt(el.coins);\n        return {\n          ...el,\n          id: el.id ?? null\n        }\n      })\n      if (flag) {\n        return\n      }\n\n      if (this.testId !== -1) {\n        test.update(this.testId, { id: this.testId, ...body })\n          .then(res => {\n            if (res.ok) {\n              this.$store.commit('openPopup', 'Тест успешно изменён')\n              this.$store.commit('clearNewTest')\n              this.update()\n            } else {\n              this.$store.commit('openErrorPopup', res.msg())\n            }\n          })\n      } else {\n        body.questions = body.questions.map(quest => {\n          const first = quest.answers[0].id;\n          quest.answers = quest.answers.map(answ => {\n            if (first == 0)\n              answ.id++;\n            return answ;\n          })\n          return quest;\n        });\n        test.create('', body)\n          .then(res => {\n            if (res.ok) {\n              this.$store.commit('openPopup', 'Тест успешно сохранён')\n              this.$store.commit('clearNewTest')\n              this.$emit('close')\n            } else {\n              this.$store.commit('openErrorPopup', res.msg())\n            }\n          })\n      }\n    },\n    removeQuestion(id) {\n      this.$store.commit('removeQuestion', id)\n    },\n    calculateFormulaDivision() {\n      let max = 0;\n      this.$store.getters.questions.map(quest => {\n        let maxInAnswers = 0;\n        quest.answers.map(answ => {\n          // If we get question where we can pick all answers we should sum all of them points\n          if (this.test.type === 3) {\n            maxInAnswers += parseInt(answ.value);\n          } else {\n            maxInAnswers = (answ.value > maxInAnswers) ? parseInt(answ.value) : maxInAnswers;\n          }\n        })\n        max += maxInAnswers\n      })\n      this.formula_div = max;\n    }\n  },\n  computed: {\n    questions() {\n      this.calculateFormulaDivision();\n      return this.$store.getters.questions\n    },\n    coins() {\n      let coins = 0\n      this.questions.map(el => coins += Number(el.coins))\n      return coins\n    }\n  }\n}\n</script>\n\n<style scoped>\n.header {\n  display: grid;\n  grid-template-columns: auto 1fr min-content;\n  grid-gap: 2rem;\n  justify-content: start;\n  align-items: center;\n}\n.coins{\n  display: grid;\n  grid-template-columns: auto 1fr min-content;\n  grid-gap: 0.5rem;\n  align-items: center;\n}\n.main__input_coins{\n  margin-top: 40px;\n  display: grid;\n  grid-template-columns: 1fr 4rem;\n  align-items: center;\n  grid-gap: 1rem;\n\n}\n.type__test {\n  margin-top: 70px;\n  margin-bottom: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: stretch;\n  flex-wrap: wrap;\n}\n.types__test{\n  display: grid;\n  grid-template-columns: repeat(4,9rem);\n  grid-gap: 1rem;\n}\n.type__test__title{\n  font-size: 1rem;\n  margin-right: .5rem;\n}\n.type__test__type {\n  margin-right: .5rem;\n  margin-bottom: .5rem;\n}\n.type__test__type:last-child {\n  margin-right: 0;\n}\n.plus{\n  margin-left:10px ;\n  background: rgba(255, 255, 255, 0.17);\n  border-radius: 7px;\n  font-family: 'Rubik';\n  font-style: normal;\n  font-weight: 500;\n  width: 36px !important;\n  line-height: 34px !important;\n  font-size: 32px !important;\n  height: auto;\n  align-items: center;\n  text-align: center;\n  color: #FFFFFF;\n  cursor: pointer;\n\n}\n.header__plus{\n  display: flex;\n  align-items: center;\n\n}\n.questions__list{\n  margin-top:30px ;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.state_1{\n  color: rgba(255, 255, 255, 0.66);\n}\n.state_1 span{\n  color:  #B275FF ;\n  text-decoration: underline;\n  cursor: pointer;\n}\n\nhr {\n  margin-top: 30px;\n  margin-bottom: 30px;\n  min-width: 30vw;\n  border-left: 0px solid white;\n  border-right: 0px solid white;\n  border-bottom: 0px solid white;\n  border-top: 1px solid rgba(255, 255, 255, 0.52);\n}\n\n.ml-1 {\n  margin-left: 1rem;\n}\n\n.w-50 {\n  width: 50%;\n}\n\n.formula_controls {\n  width: 50%;\n  margin-top: 1rem;\n  margin-left: 1rem;\n  display: flex;\n  flex-direction: row;\n}\n\n.formula_control {\n  margin-right: 2rem;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}