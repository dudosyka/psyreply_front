{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport download from \"browser-downloads\";\nexport default {\n  name: 'export-excel',\n  props: {\n    // mime type [xls, csv]\n    type: {\n      type: String,\n      default: \"xls\"\n    },\n    // Json to download\n    data: {\n      type: Array,\n      required: false,\n      default: null\n    },\n    // fields inside the Json Object that you want to export\n    // if no given, all the properties in the Json are exported\n    fields: {\n      type: Object,\n      required: false\n    },\n    // this prop is used to fix the problem with other components that use the\n    // variable fields, like vee-validate. exportFields works exactly like fields\n    exportFields: {\n      type: Object,\n      required: false\n    },\n    // Use as fallback when the row has no field values\n    defaultValue: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\n    title: {\n      default: null\n    },\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n    footer: {\n      default: null\n    },\n    // filename to export\n    name: {\n      type: String,\n      default: \"data.xls\"\n    },\n    fetch: {\n      type: Function\n    },\n    meta: {\n      type: Array,\n      default: () => []\n    },\n    worksheet: {\n      type: String,\n      default: \"Sheet1\"\n    },\n    //event before generate was called\n    beforeGenerate: {\n      type: Function\n    },\n    //event before download pops up\n    beforeFinish: {\n      type: Function\n    }\n  },\n  computed: {\n    // unique identifier\n    idName() {\n      var now = new Date().getTime();\n      return \"export_\" + now;\n    },\n    downloadFields() {\n      if (this.fields !== undefined) return this.fields;\n      if (this.exportFields !== undefined) return this.exportFields;\n    }\n  },\n  methods: {\n    async generate() {\n      if (typeof this.beforeGenerate === 'function') {\n        await this.beforeGenerate();\n      }\n      let data = this.data;\n      if (typeof this.fetch === 'function' || !data) data = await this.fetch();\n      if (!data || !data.length) {\n        return;\n      }\n      let json = this.getProcessedJson(data, this.downloadFields);\n      if (this.type === \"html\") {\n        // this is mainly for testing\n        return this.export(this.jsonToXLS(json), this.name.replace(\".xls\", \".html\"), \"text/html\");\n      } else if (this.type === \"csv\") {\n        return this.export(this.jsonToCSV(json), this.name.replace(\".xls\", \".csv\"), \"application/csv\");\n      }\n      return this.export(this.jsonToXLS(json), this.name, \"application/vnd.ms-excel\");\n    },\n    /*\n        Use downloadjs to generate the download link\n        */\n    export: async function (data, filename, mime) {\n      let blob = this.base64ToBlob(data, mime);\n      if (typeof this.beforeFinish === 'function') await this.beforeFinish();\n      download(blob, filename, mime);\n    },\n    /*\n        jsonToXLS\n        ---------------\n        Transform json data into an xml document with MS Excel format, sadly\n        it shows a prompt when it opens, that is a default behavior for\n        Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\n        */\n    jsonToXLS(data) {\n      let xlsTemp = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n      let xlsData = \"<thead>\";\n      const colspan = Object.keys(data[0]).length;\n      let _self = this;\n\n      //Header\n      if (this.title != null) {\n        xlsData += this.parseExtraData(this.title, '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>');\n      }\n\n      //Fields\n      xlsData += \"<tr>\";\n      for (let key in data[0]) {\n        xlsData += \"<th>\" + key + \"</th>\";\n      }\n      xlsData += \"</tr>\";\n      xlsData += \"</thead>\";\n\n      //Data\n      xlsData += \"<tbody>\";\n      data.map(function (item, index) {\n        xlsData += \"<tr>\";\n        for (let key in item) {\n          xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[key]) + \"</td>\";\n        }\n        xlsData += \"</tr>\";\n      });\n      xlsData += \"</tbody>\";\n\n      //Footer\n      if (this.footer != null) {\n        xlsData += \"<tfoot>\";\n        xlsData += this.parseExtraData(this.footer, '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>');\n        xlsData += \"</tfoot>\";\n      }\n      return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\n    },\n    /*\n        jsonToCSV\n        ---------------\n        Transform json data into an CSV file.\n        */\n    jsonToCSV(data) {\n      var csvData = [];\n      //Header\n      if (this.title != null) {\n        csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n      }\n      //Fields\n      for (let key in data[0]) {\n        csvData.push(key);\n        csvData.push(\",\");\n      }\n      csvData.pop();\n      csvData.push(\"\\r\\n\");\n      //Data\n      data.map(function (item) {\n        for (let key in item) {\n          let escapedCSV = '=\\\"' + item[key] + '\\\"'; // cast Numbers to string\n          if (escapedCSV.match(/[,\"\\n]/)) {\n            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n          }\n          csvData.push(escapedCSV);\n          csvData.push(\",\");\n        }\n        csvData.pop();\n        csvData.push(\"\\r\\n\");\n      });\n      //Footer\n      if (this.footer != null) {\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n      }\n      return csvData.join(\"\");\n    },\n    /*\n        getProcessedJson\n        ---------------\n        Get only the data to export, if no fields are set return all the data\n        */\n    getProcessedJson(data, header) {\n      let keys = this.getKeys(data, header);\n      let newData = [];\n      let _self = this;\n      data.map(function (item, index) {\n        let newItem = {};\n        for (let label in keys) {\n          let property = keys[label];\n          newItem[label] = _self.getValue(property, item);\n        }\n        newData.push(newItem);\n      });\n      return newData;\n    },\n    getKeys(data, header) {\n      if (header) {\n        return header;\n      }\n      let keys = {};\n      for (let key in data[0]) {\n        keys[key] = key;\n      }\n      return keys;\n    },\n    /*\n        parseExtraData\n        ---------------\n        Parse title and footer attribute to the csv format\n        */\n    parseExtraData(extraData, format) {\n      let parseData = \"\";\n      if (Array.isArray(extraData)) {\n        for (var i = 0; i < extraData.length; i++) {\n          parseData += format.replace(\"${data}\", extraData[i]);\n        }\n      } else {\n        parseData += format.replace(\"${data}\", extraData);\n      }\n      return parseData;\n    },\n    getValue(key, item) {\n      const field = typeof key !== \"object\" ? key : key.field;\n      let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n      let value = this.defaultValue;\n      if (!field) value = item;else if (indexes.length > 1) value = this.getValueFromNestedItem(item, indexes);else value = this.parseValue(item[field]);\n      if (key.hasOwnProperty('callback')) value = this.getValueFromCallback(value, key.callback);\n      return value;\n    },\n    /*\n    convert values with newline \\n characters into <br/>\n    */\n    valueReformattedForMultilines(value) {\n      if (typeof value == \"string\") return value.replace(/\\n/ig, \"<br/>\");else return value;\n    },\n    getValueFromNestedItem(item, indexes) {\n      let nestedItem = item;\n      for (let index of indexes) {\n        if (nestedItem) nestedItem = nestedItem[index];\n      }\n      return this.parseValue(nestedItem);\n    },\n    getValueFromCallback(item, callback) {\n      if (typeof callback !== \"function\") return this.defaultValue;\n      const value = callback(item);\n      return this.parseValue(value);\n    },\n    parseValue(value) {\n      return value || value === 0 || typeof value === 'boolean' ? value : this.defaultValue;\n    },\n    base64ToBlob(data, mime) {\n      let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n      let bstr = atob(base64);\n      let n = bstr.length;\n      let u8arr = new Uint8ClampedArray(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      return new Blob([u8arr], {\n        type: mime\n      });\n    }\n  } // end methods\n};","map":{"version":3,"mappings":"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","names":["download","name","props","type","String","default","data","Array","required","fields","Object","exportFields","defaultValue","title","footer","fetch","Function","meta","worksheet","beforeGenerate","beforeFinish","computed","idName","now","Date","getTime","downloadFields","undefined","methods","generate","length","json","getProcessedJson","export","jsonToXLS","replace","jsonToCSV","filename","mime","blob","base64ToBlob","xlsTemp","xlsData","colspan","keys","_self","parseExtraData","key","map","item","index","valueReformattedForMultilines","csvData","push","pop","escapedCSV","match","join","header","getKeys","newData","newItem","label","property","getValue","extraData","format","parseData","isArray","i","field","indexes","split","value","getValueFromNestedItem","parseValue","hasOwnProperty","getValueFromCallback","callback","nestedItem","base64","window","btoa","unescape","encodeURIComponent","bstr","atob","n","u8arr","Uint8ClampedArray","charCodeAt","Blob"],"sourceRoot":"","sources":["/home/yan/Документы/psyreply2.0_front/admin/node_modules/vue-excel-export/VueComment.vue"],"sourcesContent":["<template>\n    <div\n            :id=\"idName\"\n            @click=\"generate\">\n        <slot>\n            Download {{name}}\n        </slot>\n    </div>\n</template>\n\n<script>\n    import download from \"browser-downloads\";\n\n    export default {\n        name: 'export-excel',\n        props: {\n            // mime type [xls, csv]\n            type: {\n                type: String,\n                default: \"xls\"\n            },\n            // Json to download\n            data: {\n                type: Array,\n                required: false,\n                default: null\n            },\n            // fields inside the Json Object that you want to export\n            // if no given, all the properties in the Json are exported\n            fields: {\n                type: Object,\n                required: false\n            },\n            // this prop is used to fix the problem with other components that use the\n            // variable fields, like vee-validate. exportFields works exactly like fields\n            exportFields: {\n                type: Object,\n                required: false\n            },\n            // Use as fallback when the row has no field values\n            defaultValue: {\n                type: String,\n                required: false,\n                default: \"\"\n            },\n            // Title(s) for the data, could be a string or an array of strings (multiple titles)\n            title: {\n                default: null\n            },\n            // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n            footer: {\n                default: null\n            },\n            // filename to export\n            name: {\n                type: String,\n                default: \"data.xls\"\n            },\n            fetch: {\n                type: Function,\n            },\n            meta: {\n                type: Array,\n                default: () => []\n            },\n            worksheet: {\n                type: String,\n                default: \"Sheet1\"\n            },\n            //event before generate was called\n            beforeGenerate: {\n                type: Function,\n            },\n            //event before download pops up\n            beforeFinish: {\n                type: Function,\n            },\n        },\n        computed: {\n            // unique identifier\n            idName() {\n                var now = new Date().getTime();\n                return \"export_\" + now;\n            },\n\n            downloadFields() {\n                if (this.fields !== undefined) return this.fields;\n\n                if (this.exportFields !== undefined) return this.exportFields;\n            }\n        },\n        methods: {\n            async generate() {\n                if (typeof this.beforeGenerate === 'function') {\n                    await this.beforeGenerate();\n                }\n                let data = this.data;\n                if (typeof this.fetch === 'function' || !data)\n                    data = await this.fetch();\n\n                if (!data || !data.length) {\n                    return;\n                }\n\n                let json = this.getProcessedJson(data, this.downloadFields);\n                if (this.type === \"html\") {\n                    // this is mainly for testing\n                    return this.export(\n                        this.jsonToXLS(json),\n                        this.name.replace(\".xls\", \".html\"),\n                        \"text/html\"\n                    );\n                } else if (this.type === \"csv\") {\n                    return this.export(\n                        this.jsonToCSV(json),\n                        this.name.replace(\".xls\", \".csv\"),\n                        \"application/csv\"\n                    );\n                }\n                return this.export(\n                    this.jsonToXLS(json),\n                    this.name,\n                    \"application/vnd.ms-excel\"\n                );\n            },\n            /*\n                Use downloadjs to generate the download link\n                */\n            export: async function (data, filename, mime) {\n                let blob = this.base64ToBlob(data, mime);\n                if (typeof this.beforeFinish === 'function')\n                    await this.beforeFinish();\n                download(blob, filename, mime);\n            },\n            /*\n                jsonToXLS\n                ---------------\n                Transform json data into an xml document with MS Excel format, sadly\n                it shows a prompt when it opens, that is a default behavior for\n                Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\n                */\n            jsonToXLS(data) {\n                let xlsTemp =\n                    '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n                let xlsData = \"<thead>\";\n                const colspan = Object.keys(data[0]).length;\n                let _self = this;\n\n                //Header\n                if (this.title != null) {\n                    xlsData += this.parseExtraData(\n                        this.title,\n                        '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\n                    );\n                }\n\n                //Fields\n                xlsData += \"<tr>\";\n                for (let key in data[0]) {\n                    xlsData += \"<th>\" + key + \"</th>\";\n                }\n                xlsData += \"</tr>\";\n                xlsData += \"</thead>\";\n\n                //Data\n                xlsData += \"<tbody>\";\n                data.map(function (item, index) {\n                    xlsData += \"<tr>\";\n                    for (let key in item) {\n                        xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[key]) + \"</td>\";\n                    }\n                    xlsData += \"</tr>\";\n                });\n                xlsData += \"</tbody>\";\n\n                //Footer\n                if (this.footer != null) {\n                    xlsData += \"<tfoot>\";\n                    xlsData += this.parseExtraData(\n                        this.footer,\n                        '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\n                    );\n                    xlsData += \"</tfoot>\";\n                }\n\n                return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\n            },\n            /*\n                jsonToCSV\n                ---------------\n                Transform json data into an CSV file.\n                */\n            jsonToCSV(data) {\n                var csvData = [];\n                //Header\n                if (this.title != null) {\n                    csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n                }\n                //Fields\n                for (let key in data[0]) {\n                    csvData.push(key);\n                    csvData.push(\",\");\n                }\n                csvData.pop();\n                csvData.push(\"\\r\\n\");\n                //Data\n                data.map(function (item) {\n                    for (let key in item) {\n                        let escapedCSV = '=\\\"' + item[key] + '\\\"'; // cast Numbers to string\n                        if (escapedCSV.match(/[,\"\\n]/)) {\n                            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n                        }\n                        csvData.push(escapedCSV);\n                        csvData.push(\",\");\n                    }\n                    csvData.pop();\n                    csvData.push(\"\\r\\n\");\n                });\n                //Footer\n                if (this.footer != null) {\n                    csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n                }\n                return csvData.join(\"\");\n            },\n            /*\n                getProcessedJson\n                ---------------\n                Get only the data to export, if no fields are set return all the data\n                */\n            getProcessedJson(data, header) {\n                let keys = this.getKeys(data, header);\n                let newData = [];\n                let _self = this;\n                data.map(function (item, index) {\n                    let newItem = {};\n                    for (let label in keys) {\n                        let property = keys[label];\n                        newItem[label] = _self.getValue(property, item);\n                    }\n                    newData.push(newItem);\n                });\n\n                return newData;\n            },\n            getKeys(data, header) {\n                if (header) {\n                    return header;\n                }\n\n                let keys = {};\n                for (let key in data[0]) {\n                    keys[key] = key;\n                }\n                return keys;\n            },\n            /*\n                parseExtraData\n                ---------------\n                Parse title and footer attribute to the csv format\n                */\n            parseExtraData(extraData, format) {\n                let parseData = \"\";\n                if (Array.isArray(extraData)) {\n                    for (var i = 0; i < extraData.length; i++) {\n                        parseData += format.replace(\"${data}\", extraData[i]);\n                    }\n                } else {\n                    parseData += format.replace(\"${data}\", extraData);\n                }\n                return parseData;\n            },\n\n            getValue(key, item) {\n                const field = typeof key !== \"object\" ? key : key.field;\n                let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n                let value = this.defaultValue;\n\n                if (!field)\n                    value = item;\n                else if (indexes.length > 1)\n                    value = this.getValueFromNestedItem(item, indexes);\n                else\n                    value = this.parseValue(item[field]);\n\n                if (key.hasOwnProperty('callback'))\n                    value = this.getValueFromCallback(value, key.callback);\n\n                return value;\n            },\n\n            /*\n            convert values with newline \\n characters into <br/>\n            */\n            valueReformattedForMultilines(value) {\n                if (typeof (value) == \"string\") return (value.replace(/\\n/ig, \"<br/>\"));\n                else return (value);\n            },\n\n            getValueFromNestedItem(item, indexes) {\n                let nestedItem = item;\n                for (let index of indexes) {\n                    if (nestedItem)\n                        nestedItem = nestedItem[index];\n                }\n                return this.parseValue(nestedItem);\n            },\n\n            getValueFromCallback(item, callback) {\n                if (typeof callback !== \"function\")\n                    return this.defaultValue\n                const value = callback(item);\n                return this.parseValue(value);\n            },\n            parseValue(value) {\n                return value || value === 0 || typeof value === 'boolean'\n                    ? value\n                    : this.defaultValue;\n            },\n            base64ToBlob(data, mime) {\n                let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n                let bstr = atob(base64);\n                let n = bstr.length;\n                let u8arr = new Uint8ClampedArray(n);\n                while (n--) {\n                    u8arr[n] = bstr.charCodeAt(n);\n                }\n                return new Blob([u8arr], {type: mime});\n            }\n        } // end methods\n    };\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}