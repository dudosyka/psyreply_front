{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '@/assets/img/coins.svg';\nconst _withScopeId = n => (_pushScopeId(\"data-v-5e1751eb\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"header\"\n};\nconst _hoisted_2 = {\n  class: \"heading\"\n};\nconst _hoisted_3 = {\n  class: \"main\"\n};\nconst _hoisted_4 = {\n  class: \"main__input_coins\"\n};\nconst _hoisted_5 = {\n  class: \"coins\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_7 = {\n  class: \"count\"\n};\nconst _hoisted_8 = {\n  class: \"types\"\n};\nconst _hoisted_9 = {\n  class: \"type__test\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"type__test__title\"\n}, \"Тип теста\", -1 /* HOISTED */));\nconst _hoisted_11 = {\n  class: \"type__test\"\n};\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"type__test__title\"\n}, \"Тип метрики\", -1 /* HOISTED */));\nconst _hoisted_13 = {\n  key: 0,\n  class: \"questions\"\n};\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_15 = {\n  class: \"header__plus\"\n};\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"heading\"\n}, \"Вопросы\", -1 /* HOISTED */));\nconst _hoisted_17 = {\n  class: \"type__test\"\n};\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"type__test__title\"\n}, \"Формула\", -1 /* HOISTED */));\nconst _hoisted_19 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_20 = {\n  class: \"formula_controls\"\n};\nconst _hoisted_21 = {\n  key: 1,\n  class: \"questions__list\"\n};\nconst _hoisted_22 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"state_1\"\n}, [/*#__PURE__*/_createTextVNode(\"Здесь будет отображаться список вопросов. \"), /*#__PURE__*/_createElementVNode(\"span\", null, \"Начните с создание нового вопроса\")], -1 /* HOISTED */));\nconst _hoisted_23 = [_hoisted_22];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_y_left_arrow_button = _resolveComponent(\"y-left-arrow-button\");\n  const _component_y_input = _resolveComponent(\"y-input\");\n  const _component_y_mini_button = _resolveComponent(\"y-mini-button\");\n  const _component_y_cool_button = _resolveComponent(\"y-cool-button\");\n  const _component_question = _resolveComponent(\"question\");\n  const _component_y_button = _resolveComponent(\"y-button\");\n  const _component_create_metric = _resolveComponent(\"create-metric\");\n  const _component_y_modal = _resolveComponent(\"y-modal\");\n  return _openBlock(), _createBlock(_component_y_modal, {\n    class: \"modal\"\n  }, {\n    default: _withCtx(() => [$data.window === 'main' ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createElementVNode(\"header\", _hoisted_1, [$props.testId === -1 ? (_openBlock(), _createBlock(_component_y_left_arrow_button, {\n      key: 0,\n      onClick: $options.close\n    }, null, 8 /* PROPS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"h1\", _hoisted_2, _toDisplayString($props.title), 1 /* TEXT */)]), _createElementVNode(\"article\", _hoisted_3, [_createCommentVNode(\" We can use main единожды !\"), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_y_input, {\n      modelValue: $data.test.title,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.test.title = $event),\n      placeholder: \"Название теста...\"\n    }, null, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createElementVNode(\"div\", _hoisted_7, _toDisplayString($options.coins), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_hoisted_10, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.questionTypes, type => {\n      return _openBlock(), _createBlock(_component_y_mini_button, {\n        class: \"type__test__type\",\n        key: `${type.id}${type.name}`,\n        active: type.id === $data.test.type,\n        onClick: $event => $options.selectLabel('type', type.id)\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(type.name), 1 /* TEXT */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"active\", \"onClick\"]);\n    }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_11, [_hoisted_12, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.metrics, metric => {\n      return _openBlock(), _createBlock(_component_y_mini_button, {\n        class: \"type__test__type\",\n        key: `${metric.id}${metric.name}`,\n        active: metric.id === $data.test.metric,\n        onClick: $event => $options.selectLabel('metric', metric.id)\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(metric.name), 1 /* TEXT */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"active\", \"onClick\"]);\n    }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_y_mini_button, {\n      class: \"type__test__type\",\n      onClick: $options.createMetric\n    }, {\n      default: _withCtx(() => [_createTextVNode(\" Добавить \")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])])])]), $data.test.metric > 0 && $data.test.type > 0 ? (_openBlock(), _createElementBlock(\"section\", _hoisted_13, [_hoisted_14, _createElementVNode(\"div\", _hoisted_15, [_hoisted_16, $options.questions.length <= 0 ? (_openBlock(), _createBlock(_component_y_cool_button, {\n      key: 0,\n      class: \"ml-1\",\n      onClick: $options.addQuestion\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"Добавить вопрос\")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true)]), $options.questions.length > 0 ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.questions, (question, id) => {\n      return _openBlock(), _createBlock(_component_question, {\n        key: `${id}${question.id}`,\n        \"question-id\": id,\n        type: $data.test.type,\n        onRemove: $event => $options.removeQuestion(id)\n      }, null, 8 /* PROPS */, [\"question-id\", \"type\", \"onRemove\"]);\n    }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_y_cool_button, {\n      onClick: $options.addQuestion\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"Добавить вопрос\")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createElementVNode(\"div\", _hoisted_17, [_hoisted_18, _createVNode(_component_y_input, {\n      class: \"w-50\",\n      modelValue: $data.test.formula,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.test.formula = $event)\n    }, null, 8 /* PROPS */, [\"modelValue\"]), _createTextVNode(), _hoisted_19, _createElementVNode(\"div\", _hoisted_20, [_createVNode(_component_y_button, {\n      class: \"formula_control\",\n      onClick: $options.autoFormula\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"Сумма по всем вопросам\")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createCommentVNode(\"              <y-input class=\\\"formula_control\\\" placeholder=\\\"Добавить делитель\\\" v-model.trim=\\\"formula_div\\\"></y-input>\")])]), _createVNode(_component_y_cool_button, {\n      onClick: $options.saveTest\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"Сохранить тест\")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_21, _hoisted_23)), _createCommentVNode(\"        <hr>\\n                <y-test-type1 />\\n                <hr>\\n                <y-test-type2 />\\n                <hr>\")])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true), $data.window === 'createMetric' ? (_openBlock(), _createBlock(_component_create_metric, {\n      key: 1,\n      onClose: $options.createMetricClosed\n    }, null, 8 /* PROPS */, [\"onClose\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":"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","names":["_imports_0","class","_createElementVNode","src","alt","_hoisted_22","_createBlock","_component_y_modal","$data","_createElementBlock","_Fragment","key","_hoisted_1","$props","_component_y_left_arrow_button","onClick","$options","_hoisted_2","_hoisted_3","_createCommentVNode","_hoisted_4","_createVNode","_component_y_input","title","placeholder","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","type","_component_y_mini_button","id","name","active","_hoisted_11","_hoisted_12","metric","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","length","_component_y_cool_button","question","_component_question","onRemove","_hoisted_17","_hoisted_18","formula","_hoisted_19","_hoisted_20","_component_y_button","_hoisted_21","_component_create_metric","onClose"],"sourceRoot":"","sources":["/home/yan/Документы/psyreply2.0_front/admin/src/components/Test/CreateTest.vue"],"sourcesContent":["<template>\n  <y-modal class=\"modal\">\n    <template v-if=\"window === 'main'\">\n      <header class=\"header\">\n        <y-left-arrow-button v-if=\"testId === -1\" @click=\"close\" />\n        <h1 class=\"heading\">{{ title }}</h1>\n      </header>\n\n      <article class=\"main\"> <!-- We can use main единожды !-->\n        <div class=\"main__input_coins\">\n          <y-input v-model=\"test.title\" placeholder=\"Название теста...\"/>\n          <div class=\"coins\">\n            <img src=\"@/assets/img/coins.svg\" alt=\"\">\n            <div class=\"count\">{{ coins }}</div>\n          </div>\n        </div>\n\n        <div class=\"types\">\n          <div class=\"type__test\">\n            <div class=\"type__test__title\">Тип теста</div>\n            <y-mini-button\n                class=\"type__test__type\"\n                v-for=\"type of questionTypes\"\n                :key=\"`${type.id}${type.name}`\"\n                :active=\"type.id === test.type\"\n                @click=\"selectLabel('type', type.id)\"\n            >\n              {{ type.name }}\n            </y-mini-button>\n          </div>\n          <div class=\"type__test\">\n            <div class=\"type__test__title\">Тип метрики</div>\n            <y-mini-button\n                class=\"type__test__type\"\n                v-for=\"metric of metrics\"\n                :key=\"`${metric.id}${metric.name}`\"\n                :active=\"metric.id === test.metric\"\n                @click=\"selectLabel('metric', metric.id)\"\n            >\n              {{ metric.name }}\n            </y-mini-button>\n\n            <y-mini-button\n                class=\"type__test__type\"\n                @click=\"createMetric\"\n            >\n              Добавить\n            </y-mini-button>\n          </div>\n        </div>\n      </article>\n\n      <section v-if=\"test.metric > 0 && test.type > 0\" class=\"questions\">\n        <hr/>\n        <div class=\"header__plus\">\n          <h2 class=\"heading\">Вопросы</h2>\n          <y-cool-button v-if=\"questions.length <= 0\" class=\"ml-1\" @click=\"addQuestion\">Добавить вопрос</y-cool-button>\n        </div>\n\n        <template v-if=\"questions.length > 0\">\n\n          <template v-for=\"(question, id) in questions\" :key=\"`${id}${question.id}`\">\n            <question\n                :question-id=\"id\"\n                :type=\"test.type\"\n                @remove=\"removeQuestion(id)\"\n            />\n          </template>\n\n          <y-cool-button @click=\"addQuestion\">Добавить вопрос</y-cool-button>\n\n          <div class=\"type__test\">\n            <div class=\"type__test__title\">Формула</div>\n            <y-input class=\"w-50\" v-model=\"test.formula\" /> <br>\n            <div class=\"formula_controls\">\n              <y-button class=\"formula_control\" @click=\"autoFormula\">Сумма по всем вопросам</y-button>\n<!--              <y-input class=\"formula_control\" placeholder=\"Добавить делитель\" v-model.trim=\"formula_div\"></y-input>-->\n            </div>\n          </div>\n\n          <y-cool-button @click=\"saveTest\">Сохранить тест</y-cool-button>\n        </template>\n\n        <div v-else class=\"questions__list\">\n          <div class=\"state_1\">Здесь будет отображаться список вопросов.\n            <span>Начните с создание нового вопроса</span>\n          </div>\n        </div>\n\n        <!--        <hr>\n                <y-test-type1 />\n                <hr>\n                <y-test-type2 />\n                <hr>-->\n\n      </section>\n    </template>\n\n    <create-metric\n        v-if=\"window === 'createMetric'\"\n        @close=\"createMetricClosed\"\n    ></create-metric>\n  </y-modal>\n</template>\n\n<script>\nimport AddAnswers from \"@/components/Test/AddAnswers\";\nimport Question from '@/components/Test/Question';\n\nimport Metric from '@/api/admin/Metric';\nimport QuestionType from '@/api/admin/QuestionType';\nimport Test from '@/api/admin/Test'\nimport CreateMetric from \"@/components/Test/Metrics/CreateMetric\";\nimport YInput from \"@/components/UI/YInput\";\nimport mainConf, {ProjectState} from \"../../../../main.conf\";\n\nfunction update(data) {\n  if (data.testId !== -1) {\n    const test = new Test()\n    test.get(data.testId)\n      .then(res => {\n        if (res.ok) {\n          res.json().then(res => {\n            const r = res.body;\n            data.test.type = r.type.id\n            data.test.title = r.title\n            data.test.formula = r.formula.match('\\\\[\\\\+(.*)\\\\]')[1]\n            data.formula_div = r.formula.match('.*\\\\/(.*)')[1]\n            data.test.metric = r.metric.id\n            r.questions = r.questions.map(el => {\n              return {\n                ...el,\n                answers: JSON.parse(el.value)\n              }\n            })\n            data.$store.commit('fillQuestions', r.questions)\n          })\n        } else {\n          this.$store.commit('openErrorPopup', res.msg())\n          if (mainConf.projectState === ProjectState.dev)\n            console.log(res)\n        }\n      })\n  }\n\n  const metric = new Metric\n  metric.getOne()\n    .then(res => {\n      if (res.ok) {\n        res.json().then(r => data.metrics = r.body)\n      } else {\n        this.$store.commit('openErrorPopup', res.msg())\n      }\n    })\n  const types = new QuestionType\n  types.getOne()\n    .then(res => {\n      if (res.ok) {\n        res.json().then(r => data.questionTypes = r.body)\n      } else {\n        this.$store.commit('openErrorPopup', res.msg())\n      }\n    })\n}\n\nexport default {\n  name: \"CreateTest\",\n  components: {\n    YInput,\n    CreateMetric,\n    AddAnswers, Question\n  },\n  emits: ['close'],\n  props: {\n    testId: {\n      type: Number,\n      default: -1\n    },\n    title: {\n      type: String,\n      default: 'Новый тест'\n    }\n  },\n  data(){\n    return {\n      window: 'main',\n      questionTypes: [],\n      metrics: [],\n      formula_div: \"\",\n      test: {\n        type: null,\n        title: null,\n        formula: null,\n        metric: null,\n      },\n    }\n  },\n  created() {\n    this.$store.commit('clearNewTest');\n    update(this)\n  },\n  methods: {\n    updateMetricList() {\n      const metric = new Metric()\n      metric.getOne()\n          .then(res => {\n            if (res.ok) {\n              res.json().then(r => this.metrics = r.body)\n            } else {\n              this.$store.commit('openErrorPopup', res.msg())\n            }\n          })\n    },\n    createMetric() {\n      this.window = 'createMetric';\n      this.$router.push('/test/createMetric');\n    },\n    createMetricClosed() {\n      this.window = 'main'\n      this.updateMetricList();\n      this.$router.push('/test/create')\n    },\n    autoFormula() {\n      const formulaArr = []\n      let i = 1;\n      this.$store.getters.questions.map(() => {\n        formulaArr.push(\"$\" + i);\n        i++;\n      });\n      this.test.formula = formulaArr.join(\"+\");\n    },\n    close() {\n      this.$emit('close')\n      this.$store.commit('clearNewTest')\n    },\n    update() {\n      update(this)\n    },\n    selectLabel(type, id) {\n      if (this.questions.length > 0 && type === 'type') {\n        this.$store.commit('openErrorPopup', 'Вы не можете изменят тип теста, если вопросы уже созданы с другим типом. Пожалуйста, начните составлять тест заново')\n        return\n      }\n      this.test[type] = id\n    },\n    addQuestion() {\n      let question = {}\n\n      if (this.test.type !== 2) {\n        question = {\n          title: null,\n          picture: null,\n          answers: [],\n          coins: null\n        }\n      } else {\n        question = {\n          title: null,\n          picture: null,\n          answers: [\n            {\n              id: 1,\n              title: 'Да',\n              value: null\n            },\n            {\n              id: 2,\n              title: 'Нет',\n              value: null\n            }\n          ],\n          coins: null\n        }\n      }\n\n      this.$store.commit('addQuestion', { question, needCopy: this.test.type !== 2})\n    },\n    saveTest() {\n      if (this.test.title.length < 4) {\n        this.$store.commit('openErrorPopup', 'Слишком короткое название')\n      }\n\n      this.calculateFormulaDivision();\n\n      const test = new Test()\n\n      const body = JSON.parse(JSON.stringify(this.test))\n\n      const formula = body.formula\n\n      this.formula_div = (this.formula_div == \"\") ? 1 : parseInt(this.formula_div);\n\n      if (test.shlypaMarkupValidation(`[+${formula}]/${this.formula_div}`)) {\n        body.formula = `[+${formula}]/${this.formula_div}`\n      } else {\n        return this.$store.commit('openErrorPopup', 'Ошибка в формуле')\n      }\n\n      body.questions = this.questions\n\n      let flag = false\n      let i = 1;\n      body.questions = body.questions.map((el, id) => {\n        if (el.coins > 99099099) {\n          this.$store.commit('openErrorPopup', `Слишком большое число монет в ${id} вопросе. Максимальное количество 99099099`)\n          flag = true\n        }\n        el.answers = el.answers.map(el => {\n          // el.id++;\n          el.value = parseInt(el.value);\n          return el;\n        });\n        el.relative_id = i;\n        i++;\n        el.coins = parseInt(el.coins);\n        return {\n          ...el,\n          id: el.id ?? null\n        }\n      })\n      if (flag) {\n        return\n      }\n\n      if (this.testId !== -1) {\n        test.update(this.testId, { id: this.testId, ...body })\n          .then(res => {\n            if (res.ok) {\n              this.$store.commit('openPopup', 'Тест успешно изменён')\n              this.$store.commit('clearNewTest')\n              this.update()\n            } else {\n              this.$store.commit('openErrorPopup', res.msg())\n            }\n          })\n      } else {\n        body.questions = body.questions.map(quest => {\n          const first = quest.answers[0].id;\n          quest.answers = quest.answers.map(answ => {\n            if (first == 0)\n              answ.id++;\n            return answ;\n          })\n          return quest;\n        });\n        test.create('', body)\n          .then(res => {\n            if (res.ok) {\n              this.$store.commit('openPopup', 'Тест успешно сохранён')\n              this.$store.commit('clearNewTest')\n              this.$emit('close')\n            } else {\n              this.$store.commit('openErrorPopup', res.msg())\n            }\n          })\n      }\n    },\n    removeQuestion(id) {\n      this.$store.commit('removeQuestion', id)\n    },\n    calculateFormulaDivision() {\n      let max = 0;\n      this.$store.getters.questions.map(quest => {\n        let maxInAnswers = 0;\n        quest.answers.map(answ => {\n          // If we get question where we can pick all answers we should sum all of them points\n          if (this.test.type === 3) {\n            maxInAnswers += parseInt(answ.value);\n          } else {\n            maxInAnswers = (answ.value > maxInAnswers) ? parseInt(answ.value) : maxInAnswers;\n          }\n        })\n        max += maxInAnswers\n      })\n      this.formula_div = max;\n    }\n  },\n  computed: {\n    questions() {\n      this.calculateFormulaDivision();\n      return this.$store.getters.questions\n    },\n    coins() {\n      let coins = 0\n      this.questions.map(el => coins += Number(el.coins))\n      return coins\n    }\n  }\n}\n</script>\n\n<style scoped>\n.header {\n  display: grid;\n  grid-template-columns: auto 1fr min-content;\n  grid-gap: 2rem;\n  justify-content: start;\n  align-items: center;\n}\n.coins{\n  display: grid;\n  grid-template-columns: auto 1fr min-content;\n  grid-gap: 0.5rem;\n  align-items: center;\n}\n.main__input_coins{\n  margin-top: 40px;\n  display: grid;\n  grid-template-columns: 1fr 4rem;\n  align-items: center;\n  grid-gap: 1rem;\n\n}\n.type__test {\n  margin-top: 70px;\n  margin-bottom: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: stretch;\n  flex-wrap: wrap;\n}\n.types__test{\n  display: grid;\n  grid-template-columns: repeat(4,9rem);\n  grid-gap: 1rem;\n}\n.type__test__title{\n  font-size: 1rem;\n  margin-right: .5rem;\n}\n.type__test__type {\n  margin-right: .5rem;\n  margin-bottom: .5rem;\n}\n.type__test__type:last-child {\n  margin-right: 0;\n}\n.plus{\n  margin-left:10px ;\n  background: rgba(255, 255, 255, 0.17);\n  border-radius: 7px;\n  font-family: 'Rubik';\n  font-style: normal;\n  font-weight: 500;\n  width: 36px !important;\n  line-height: 34px !important;\n  font-size: 32px !important;\n  height: auto;\n  align-items: center;\n  text-align: center;\n  color: #FFFFFF;\n  cursor: pointer;\n\n}\n.header__plus{\n  display: flex;\n  align-items: center;\n\n}\n.questions__list{\n  margin-top:30px ;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.state_1{\n  color: rgba(255, 255, 255, 0.66);\n}\n.state_1 span{\n  color:  #B275FF ;\n  text-decoration: underline;\n  cursor: pointer;\n}\n\nhr {\n  margin-top: 30px;\n  margin-bottom: 30px;\n  min-width: 30vw;\n  border-left: 0px solid white;\n  border-right: 0px solid white;\n  border-bottom: 0px solid white;\n  border-top: 1px solid rgba(255, 255, 255, 0.52);\n}\n\n.ml-1 {\n  margin-left: 1rem;\n}\n\n.w-50 {\n  width: 50%;\n}\n\n.formula_controls {\n  width: 50%;\n  margin-top: 1rem;\n  margin-left: 1rem;\n  display: flex;\n  flex-direction: row;\n}\n\n.formula_control {\n  margin-right: 2rem;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}